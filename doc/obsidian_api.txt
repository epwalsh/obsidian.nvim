*obsidian-api*

The Obsidian.nvim Lua API.

==============================================================================

Table of contents

  obsidian.Client............................................|obsidian.Client|
  
  obsidian.Note................................................|obsidian.Note|
  
  obsidian.Workspace......................................|obsidian.Workspace|
  

------------------------------------------------------------------------------
                                                           *obsidian.SearchOpts*
                                  `SearchOpts`
Class ~
{obsidian.SearchOpts} : obsidian.ABC

Fields ~
{sort} `(boolean|?)`
{include_templates} `(boolean|?)`
{ignore_case} `(boolean|?)`

------------------------------------------------------------------------------
                                                *obsidian.SearchOpts.from_tbl()*
                         `SearchOpts.from_tbl`({opts})
Parameters ~
{opts} `(obsidian.SearchOpts|table<string, any>)`

Return ~
obsidian.SearchOpts

------------------------------------------------------------------------------
                                                 *obsidian.SearchOpts.default()*
                             `SearchOpts.default`()
Return ~
obsidian.SearchOpts

------------------------------------------------------------------------------
                                                               *obsidian.Client*
                                    `Client`
The Obsidian client is the main API for programmatically interacting with obsidian.nvim's features
in Lua. To get the client instance, run:

`local client = require("obsidian").get_client()`

Class ~
{obsidian.Client} : obsidian.ABC

Fields ~
{current_workspace} obsidian.Workspace The current workspace.
{dir} Path The root of the vault for the current workspace.
{opts} obsidian.config.ClientOpts The client config.
{buf_dir} Path|? The parent directory of the current buffer.
{_default_opts} obsidian.config.ClientOpts
{_quiet} `(boolean)`

------------------------------------------------------------------------------
                                                         *obsidian.Client.new()*
                              `Client.new`({opts})
Create a new Obsidian client without additional setup.
This is mostly used for testing. In practice you usually want to obtain the existing
client through:

`require("obsidian").get_client()`

Parameters ~
{opts} obsidian.config.ClientOpts

Return ~
obsidian.Client

------------------------------------------------------------------------------
                                               *obsidian.Client.set_workspace()*
              `Client.set_workspace`({self}, {workspace}, {opts})
Parameters ~
{workspace} obsidian.Workspace
{opts} { lock: `(boolean|?)` }|?

------------------------------------------------------------------------------
                                          *obsidian.Client.opts_for_workspace()*
                `Client.opts_for_workspace`({self}, {workspace})
Get the normalize opts for a given workspace.

Parameters ~
{workspace} obsidian.Workspace|?

Return ~
obsidian.config.ClientOpts

------------------------------------------------------------------------------
                                            *obsidian.Client.switch_workspace()*
             `Client.switch_workspace`({self}, {workspace}, {opts})
Switch to a different workspace.

Parameters ~
{workspace} `(obsidian.Workspace|string)` The workspace object or the name of an existing workspace.
{opts} { lock: `(boolean|?)` }|?

------------------------------------------------------------------------------
                                                *obsidian.Client.path_is_note()*
               `Client.path_is_note`({self}, {path}, {workspace})
Check if a path represents a note in the workspace.

Parameters ~
{path} `(string|Path)`
{workspace} obsidian.Workspace|?

Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                  *obsidian.Client.vault_root()*
                    `Client.vault_root`({self}, {workspace})
Get the absolute path to the root of the Obsidian vault for the given workspace or the
current workspace.

Parameters ~
{workspace} obsidian.Workspace|?

Return ~
Path

------------------------------------------------------------------------------
                                                  *obsidian.Client.vault_name()*
                          `Client.vault_name`({self})
Get the name of the current vault.

Return ~
`(string)`

------------------------------------------------------------------------------
                                         *obsidian.Client.vault_relative_path()*
                  `Client.vault_relative_path`({self}, {path})
Make a path relative to the vault root, if possible.

Parameters ~
{path} `(string|Path)`

Return ~
`(string|)` `(optional)`

------------------------------------------------------------------------------
                                               *obsidian.Client.templates_dir()*
                  `Client.templates_dir`({self}, {workspace})
Get the templates folder.

Parameters ~
{workspace} obsidian.Workspace|?

Return ~
Path| `(optional)`

------------------------------------------------------------------------------
                                     *obsidian.Client.should_save_frontmatter()*
                `Client.should_save_frontmatter`({self}, {note})
Determines whether a note's frontmatter is managed by obsidian.nvim.

Parameters ~
{note} obsidian.Note

Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                     *obsidian.Client.command()*
                `Client.command`({self}, {cmd_name}, {cmd_data})
Run an obsidian command directly.

Usage ~
`client:command("ObsidianNew", { args = "Foo" })`

Parameters ~
{cmd_name} `(string)` The name of the command.
{cmd_data} `(table|?)` The payload for the command.

------------------------------------------------------------------------------
                                             *obsidian.Client.search_defaults()*
                        `Client.search_defaults`({self})
Get the default search options.

Return ~
obsidian.SearchOpts

------------------------------------------------------------------------------
                                                  *obsidian.Client.find_notes()*
             `Client.find_notes`({self}, {term}, {opts}, {timeout})
Find notes matching the given term. Notes are searched based on ID, title, filename, and aliases.

Parameters ~
{term} `(string)` The term to search for
{opts} `(obsidian.SearchOpts|boolean|?)` Search options or a boolean indicating if sorting should be done
{timeout} `(integer|?)` Timeout to wait in milliseconds

Return ~
obsidian.Note[]

------------------------------------------------------------------------------
                                            *obsidian.Client.find_notes_async()*
         `Client.find_notes_async`({self}, {term}, {opts}, {callback})
An async version of `find_notes()` that runs the callback with an array of all matching notes.

Parameters ~
{term} `(string)` The term to search for
{opts} `(obsidian.SearchOpts|boolean|?)` search options or a boolean indicating if sorting should be used
{callback} `(fun(notes: obsidian.Note[]))`

------------------------------------------------------------------------------
                                                  *obsidian.Client.find_files()*
             `Client.find_files`({self}, {term}, {opts}, {timeout})
Find non-markdown files in the vault.

Parameters ~
{term} `(string)` The search term.
{opts} `(obsidian.SearchOpts|boolean|?)` Search options or a boolean indicating if sorting should be done
{timeout} `(integer|?)` Timeout to wait in milliseconds.

Return ~
Path[]

------------------------------------------------------------------------------
                                            *obsidian.Client.find_files_async()*
         `Client.find_files_async`({self}, {term}, {opts}, {callback})
An async version of `find_files`.

Parameters ~
{term} `(string)` The search term.
{opts} `(obsidian.SearchOpts|boolean|?)` Search options or a boolean indicating if sorting should be done
{callback} `(fun(paths: Path[]))`

------------------------------------------------------------------------------
                                                *obsidian.Client.resolve_note()*
               `Client.resolve_note`({self}, {query}, {timeout})
Resolve the query to a single note if possible, otherwise `nil` is returned.
The 'query' can be a path, filename, note ID, alias, title, etc.

Parameters ~
{query} `(string)`

Return ~
obsidian.Note| `(optional)`

------------------------------------------------------------------------------
                                          *obsidian.Client.resolve_note_async()*
            `Client.resolve_note_async`({self}, {query}, {callback})
An async version of `resolve_note()`.

Parameters ~
{query} `(string)`
{callback} `(fun(note: obsidian.Note|?))`

Return ~
obsidian.Note| `(optional)`

------------------------------------------------------------------------------
Class ~
{obsidian.ResolveLinkResult}

Fields ~
{location} `(string)`
{name} `(string)`
{link_type} obsidian.search.RefTypes
{path} Path|?
{note} obsidian.Note|?
{url} `(string|?)`

------------------------------------------------------------------------------
                                          *obsidian.Client.resolve_link_async()*
            `Client.resolve_link_async`({self}, {link}, {callback})
Resolve a link. If the link argument is `nil` we attempt to resolve a link under the cursor.

Parameters ~
{link} `(string|?)`
{callback} `(fun(res: obsidian.ResolveLinkResult|?))`

------------------------------------------------------------------------------
                                           *obsidian.Client.follow_link_async()*
               `Client.follow_link_async`({self}, {link}, {opts})
Follow a link. If the link argument is `nil` we attempt to follow a link under the cursor.

Parameters ~
{link} `(string|?)`
{opts} { open_strategy: obsidian.config.OpenStrategy|? }|?

------------------------------------------------------------------------------
                                                   *obsidian.Client.open_note()*
               `Client.open_note`({self}, {note_or_path}, {opts})
Open a note in a buffer.

Parameters ~
{note_or_path} `(string|Path|obsidian.Note)`
{opts} { line: `(integer|?,)` col: integer|?, open_strategy: obsidian.config.OpenStrategy|? }|?

------------------------------------------------------------------------------
                                                *obsidian.Client.current_note()*
                         `Client.current_note`({self})
Get the current note.

Return ~
obsidian.Note| `(optional)`

------------------------------------------------------------------------------
Class ~
{obsidian.TagLocation}

Fields ~
{tag} `(string)` The tag found.
{note} obsidian.Note The note instance where the tag was found.
{path} `(string|Path)` The path to the note where the tag was found.
{line} `(integer)` The line number (1-indexed) where the tag was found.
{text} `(string)` The text (with whitespace stripped) of the line where the tag was found.
{tag_start} `(integer|?)` The index within 'text' where the tag starts.
{tag_end} `(integer|?)` The index within 'text' where the tag ends.

------------------------------------------------------------------------------
                                                   *obsidian.Client.find_tags()*
             `Client.find_tags`({self}, {term}, {opts}, {timeout})
Find all tags starting with the given search term(s).

Parameters ~
{term} `(string|string[])` The search term.
{opts} `(obsidian.SearchOpts|boolean|?)` Search options or a boolean indicating if sorting should be used.
{timeout} `(integer|?)` Timeout in milliseconds.

Return ~
obsidian.TagLocation[]

------------------------------------------------------------------------------
                                             *obsidian.Client.find_tags_async()*
          `Client.find_tags_async`({self}, {term}, {opts}, {callback})
An async version of 'find_tags()'.

Parameters ~
{term} `(string|string[])` The search term.
{opts} `(obsidian.SearchOpts|boolean|?)` Search options or a boolean indicating if sorting should be used.
{callback} `(fun(tags: obsidian.TagLocation[]))`

------------------------------------------------------------------------------
Class ~
{obsidian.BacklinkMatches}

Fields ~
{note} obsidian.Note The note instance where the backlinks were found.
{path} `(string|Path)` The path to the note where the backlinks were found.
{matches} obsidian.BacklinkMatch[] The backlinks within the note.

------------------------------------------------------------------------------
Class ~
{obsidian.BacklinkMatch}

Fields ~
{line} `(integer)` The line number (1-indexed) where the backlink was found.
{text} `(string)` The text of the line where the backlink was found.

------------------------------------------------------------------------------
                                              *obsidian.Client.find_backlinks()*
           `Client.find_backlinks`({self}, {note}, {opts}, {timeout})
Find all backlinks to a note.

Parameters ~
{note} obsidian.Note The note to find backlinks for.
{opts} `(obsidian.SearchOpts|boolean|?)` Search options or a boolean indicating if sorting should be used.
{timeout} `(integer|?)` Timeout in milliseconds.

Return ~
obsidian.BacklinkMatches[]

------------------------------------------------------------------------------
                                        *obsidian.Client.find_backlinks_async()*
       `Client.find_backlinks_async`({self}, {note}, {opts}, {callback})
An async version of 'find_backlinks()'.

Parameters ~
{note} obsidian.Note The note to find backlinks for.
{opts} `(obsidian.SearchOpts|boolean|?)` Search options or a boolean indicating if sorting should be used.
{callback} `(fun(backlinks: obsidian.BacklinkMatches[]))`

------------------------------------------------------------------------------
                                                   *obsidian.Client.list_tags()*
                 `Client.list_tags`({self}, {term}, {timeout})
Gather a list of all tags in the vault. If 'term' is provided, only tags that partially match the search
term will be included.

Parameters ~
{term} `(string|?)` An optional search term to match tags
{timeout} `(integer|?)` Timeout in milliseconds

Return ~
`(string[])`

------------------------------------------------------------------------------
                                             *obsidian.Client.list_tags_async()*
              `Client.list_tags_async`({self}, {callback}, {term})
An async version of 'list_tags()'.

Parameters ~
{callback} `(fun(tags: string[]))`
{term} `(string|?)`

------------------------------------------------------------------------------
                                                 *obsidian.Client.apply_async()*
         `Client.apply_async`({self}, {on_note}, {on_done}, {timeout})
Apply a function over all notes in the current vault.

Parameters ~
{on_note} `(fun(note: obsidian.Note))`
{on_done} `(fun()|?)`
{timeout} `(integer|?)` Timeout in milliseconds.

------------------------------------------------------------------------------
                                             *obsidian.Client.apply_async_raw()*
       `Client.apply_async_raw`({self}, {on_path}, {on_done}, {timeout})
Like apply, but the callback takes a path instead of a note instance.

Parameters ~
{on_path} `(fun(path: string))`
{on_done} `(fun()|?)`
{timeout} `(integer|?)` Timeout in milliseconds.

------------------------------------------------------------------------------
                                                 *obsidian.Client.new_note_id()*
                     `Client.new_note_id`({self}, {title})
Create a new note ID.

Parameters ~
{title} `(string|?)`

Return ~
`(string)`

------------------------------------------------------------------------------
                                         *obsidian.Client.parse_title_id_path()*
           `Client.parse_title_id_path`({self}, {title}, {id}, {dir})
Parse the title, ID, and path for a new note.

Parameters ~
{title} `(string|?)`
{id} `(string|?)`
{dir} `(string|Path|?)`

Return ~
`(string|)` `(optional)`,string,Path

------------------------------------------------------------------------------
                                                    *obsidian.Client.new_note()*
           `Client.new_note`({self}, {title}, {id}, {dir}, {aliases})
Create and save a new note.

Parameters ~
{title} `(string|?)`
{id} `(string|?)`
{dir} `(string|Path|?)`
{aliases} `(string[]|?)`

Return ~
obsidian.Note

------------------------------------------------------------------------------
                                             *obsidian.Client.daily_note_path()*
                  `Client.daily_note_path`({self}, {datetime})
Get the path to a daily note.

Parameters ~
{datetime} `(integer|?)`

Return ~
Path, `(string)`

------------------------------------------------------------------------------
                                                       *obsidian.Client.today()*
                             `Client.today`({self})
Open (or create) the daily note for today.

Return ~
obsidian.Note

------------------------------------------------------------------------------
                                                   *obsidian.Client.yesterday()*
                           `Client.yesterday`({self})
Open (or create) the daily note from the last weekday.

Return ~
obsidian.Note

------------------------------------------------------------------------------
                                                    *obsidian.Client.tomorrow()*
                           `Client.tomorrow`({self})
Open (or create) the daily note for the next weekday.

Return ~
obsidian.Note

------------------------------------------------------------------------------
                                                       *obsidian.Client.daily()*
                     `Client.daily`({self}, {offset_days})
Open (or create) the daily note for today + `offset_days`.

Parameters ~
{offset_days} `(integer|?)`

Return ~
obsidian.Note

------------------------------------------------------------------------------
                                                   *obsidian.Client.update_ui()*
                      `Client.update_ui`({self}, {bufnr})
Manually update extmarks in a buffer.

Parameters ~
{bufnr} `(integer|?)`

------------------------------------------------------------------------------
                                                 *obsidian.Client.format_link()*
                  `Client.format_link`({self}, {note}, {opts})
Create a formatted markdown / wiki link for a note.

Parameters ~
{note} `(obsidian.Note|string)` The note/path to link to.
{opts} { label: `(string|?,)` link_style: obsidian.config.LinkStyle|?, id: string|? }|? Options.

Return ~
`(string)`

------------------------------------------------------------------------------
                                                      *obsidian.Client.picker()*
                     `Client.picker`({self}, {picker_name})
Get the Picker.

Parameters ~
{picker_name} obsidian.config.Picker|?

Return ~
obsidian.Picker| `(optional)`

------------------------------------------------------------------------------
                                                                 *obsidian.Note*
                                     `Note`
A class that represents a note within a vault.

Class ~
{obsidian.Note} : obsidian.ABC

Fields ~
{id} `(string|integer)`
{aliases} `(string[])`
{title} `(string|?)`
{tags} `(string[])`
{path} Path|?
{metadata} `(table|?)`
{has_frontmatter} `(boolean|?)`
{frontmatter_end_line} `(integer|?)`

------------------------------------------------------------------------------
                                                           *obsidian.Note.new()*
                  `Note.new`({id}, {aliases}, {tags}, {path})
Create new note object.

Keep in mind that you have to call `note:save(...)` to create/update the note on disk.

Parameters ~
{id} `(string|number)`
{aliases} `(string[])`
{tags} `(string[])`
{path} `(string|Path|?)`

Return ~
obsidian.Note

------------------------------------------------------------------------------
                                                  *obsidian.Note.display_info()*
                      `Note.display_info`({self}, {opts})
Get markdown display info about the note.

Parameters ~
{opts} { label: `(string|?)` }|?

Return ~
`(string)`

------------------------------------------------------------------------------
                                                        *obsidian.Note.exists()*
                             `Note.exists`({self})
Check if the note exists on the file system.

Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                         *obsidian.Note.fname()*
                              `Note.fname`({self})
Get the filename associated with the note.

Return ~
`(string|)` `(optional)`

------------------------------------------------------------------------------
                                                     *obsidian.Note.has_alias()*
                       `Note.has_alias`({self}, {alias})
Check if a note has a given alias.

Parameters ~
{alias} `(string)`

Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                       *obsidian.Note.has_tag()*
                         `Note.has_tag`({self}, {tag})
Check if a note has a given tag.

Parameters ~
{tag} `(string)`

Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                     *obsidian.Note.add_alias()*
                       `Note.add_alias`({self}, {alias})
Add an alias to the note.

Parameters ~
{alias} `(string)`

------------------------------------------------------------------------------
                                                       *obsidian.Note.add_tag()*
                         `Note.add_tag`({self}, {tag})
Add a tag to the note.

Parameters ~
{tag} `(string)`

------------------------------------------------------------------------------
                                                     *obsidian.Note.add_field()*
                    `Note.add_field`({self}, {key}, {value})
Add or update a field in the frontmatter.

Parameters ~
{key} `(string)`
{value} `(any)`

------------------------------------------------------------------------------
                                                     *obsidian.Note.get_field()*
                        `Note.get_field`({self}, {key})
Get a field in the frontmatter.

Parameters ~
{key} `(string)`

Return ~
`(any)` result

------------------------------------------------------------------------------
                                                     *obsidian.Note.from_file()*
                        `Note.from_file`({path}, {root})
Initialize a note from a file.

Parameters ~
{path} `(string|Path)`
{root} `(string|Path|?)`

Return ~
obsidian.Note

------------------------------------------------------------------------------
                                               *obsidian.Note.from_file_async()*
                     `Note.from_file_async`({path}, {root})
An async version of `.from_file()`.

Parameters ~
{path} `(string|Path)`
{root} `(string|Path|?)`

Return ~
obsidian.Note

------------------------------------------------------------------------------
                                                   *obsidian.Note.from_buffer()*
                      `Note.from_buffer`({bufnr}, {root})
Initialize a note from a buffer.

Parameters ~
{bufnr} `(integer|?)`
{root} `(string|Path|?)`

Return ~
obsidian.Note

------------------------------------------------------------------------------
                                                  *obsidian.Note.display_name()*
                          `Note.display_name`({self})
Get the display name for note.

Return ~
`(string)`

------------------------------------------------------------------------------
                                                    *obsidian.Note.from_lines()*
                   `Note.from_lines`({lines}, {path}, {root})
Initialize a note from an iterator of lines.

Parameters ~
{lines} `(function)`
{path} `(string|Path)`
{root} `(string|Path|?)`

Return ~
obsidian.Note

------------------------------------------------------------------------------
                                                 *obsidian.Note._parse_header()*
                          `Note._parse_header`({line})
Try parsing a header from a line.

Parameters ~
{line} `(string)`

Return ~
`(string|)` `(optional)`

------------------------------------------------------------------------------
                                                   *obsidian.Note.frontmatter()*
                           `Note.frontmatter`({self})
Get the frontmatter table to save.

Return ~
`(table)`

------------------------------------------------------------------------------
                                             *obsidian.Note.frontmatter_lines()*
             `Note.frontmatter_lines`({self}, {eol}, {frontmatter})
Get frontmatter lines that can be written to a buffer.

Parameters ~
{eol} `(boolean|?)`
{frontmatter} `(table|?)`

Return ~
`(string[])`

------------------------------------------------------------------------------
                                                          *obsidian.Note.save()*
        `Note.save`({self}, {path}, {insert_frontmatter}, {frontmatter})
Save note to file. This only updates the frontmatter and header, leaving the rest of the contents unchanged.

Parameters ~
{path} `(string|Path|?)`
{insert_frontmatter} `(boolean|?)`
{frontmatter} `(table|?)`

------------------------------------------------------------------------------
                                                *obsidian.Note.save_to_buffer()*
             `Note.save_to_buffer`({self}, {bufnr}, {frontmatter})
Save frontmatter to the given buffer.

Parameters ~
{bufnr} `(integer|?)`
{frontmatter} `(table|?)`

Return ~
`(boolean)` updated True if the buffer lines were updated, false otherwise.

------------------------------------------------------------------------------
Class ~
{obsidian.workspace.WorkspaceSpec}

Fields ~
{path} `(string|Path|(fun():)` string|Path)
{name} `(string|?)`
{strict} `(boolean|?)` If true, the workspace root will be fixed to 'path' instead of the vault root (if different).
{overrides} `(table|obsidian.config.ClientOpts|?)`

------------------------------------------------------------------------------
Class ~
{obsidian.workspace.WorkspaceOpts}

Fields ~
{name} `(string|?)`
{strict} `(boolean|?)` If true, the workspace root will be fixed to 'path' instead of the vault root (if different).
{overrides} `(table|obsidian.config.ClientOpts|?)`

------------------------------------------------------------------------------
                                                            *obsidian.Workspace*
                                  `Workspace`
Each workspace represents a working directory (usually an Obsidian vault) along with
a set of configuration options specific to the workspace.

Workspaces are a little more general than Obsidian vaults as you can have a workspace
outside of a vault or as a subdirectory of a vault.

Class ~
{obsidian.Workspace} : obsidian.ABC

Fields ~
{name} `(string)` An arbitrary name for the workspace.
{path} `(string)` The normalized path to the workspace.
{root} `(string)` The normalized path to the vault root of the workspace. This usually matches 'path'.
{overrides} `(table|obsidian.config.ClientOpts|?)`
{locked} `(boolean|?)`

------------------------------------------------------------------------------
                                                    *obsidian.find_vault_root()*
                         `find_vault_root`({base_dir})
Find the vault root from a given directory.

This will traverse the directory tree upwards until a '.obsidian/' folder is found to
indicate the root of a vault, otherwise the given directory is used as-is.

Parameters ~
{base_dir} `(string|Path)`

Return ~
`(string|)` `(optional)`

------------------------------------------------------------------------------
                                                      *obsidian.Workspace.new()*
                        `Workspace.new`({path}, {opts})
Create a new 'Workspace' object. This assumes the workspace already exists on the filesystem.

Parameters ~
{path} `(string|Path)` Workspace path.
{opts} obsidian.workspace.WorkspaceOpts|?

Return ~
obsidian.Workspace

------------------------------------------------------------------------------
                                            *obsidian.Workspace.new_from_spec()*
                       `Workspace.new_from_spec`({spec})
Initialize a new 'Workspace' object from a workspace spec.

Parameters ~
{spec} obsidian.workspace.WorkspaceSpec

Return ~
obsidian.Workspace

------------------------------------------------------------------------------
                                             *obsidian.Workspace.new_from_cwd()*
                        `Workspace.new_from_cwd`({opts})
Initialize a 'Workspace' object from the current working directory.

Parameters ~
{opts} obsidian.workspace.WorkspaceOpts|?

Return ~
obsidian.Workspace

------------------------------------------------------------------------------
                                             *obsidian.Workspace.new_from_buf()*
                   `Workspace.new_from_buf`({bufnr}, {opts})
Initialize a 'Workspace' object from the parent directory of the current buffer.

Parameters ~
{bufnr} `(integer|?)`
{opts} obsidian.workspace.WorkspaceOpts|?

Return ~
obsidian.Workspace

------------------------------------------------------------------------------
                                                     *obsidian.Workspace.lock()*
                            `Workspace.lock`({self})
Lock the workspace.

------------------------------------------------------------------------------
                                                  *obsidian.Workspace._unlock()*
                          `Workspace._unlock`({self})
Unlock the workspace.

------------------------------------------------------------------------------
                                    *obsidian.Workspace.get_workspace_for_dir()*
           `Workspace.get_workspace_for_dir`({cur_dir}, {workspaces})
Get the workspace corresponding to the directory (or a parent of), if there
is one.

Parameters ~
{cur_dir} `(string|Path)`
{workspaces} obsidian.workspace.WorkspaceSpec[]

Return ~
obsidian.Workspace| `(optional)`

------------------------------------------------------------------------------
                                    *obsidian.Workspace.get_workspace_for_cwd()*
                `Workspace.get_workspace_for_cwd`({workspaces})
Get the workspace corresponding to the current working directory (or a parent of), if there
is one.

Parameters ~
{workspaces} obsidian.workspace.WorkspaceSpec[]

Return ~
obsidian.Workspace| `(optional)`

------------------------------------------------------------------------------
                                    *obsidian.Workspace.get_default_workspace()*
                `Workspace.get_default_workspace`({workspaces})
Returns the default workspace.

Parameters ~
{workspaces} obsidian.workspace.WorkspaceSpec[]

Return ~
`(obsidian.Workspace|nil)`

------------------------------------------------------------------------------
                                            *obsidian.Workspace.get_from_opts()*
                       `Workspace.get_from_opts`({opts})
Resolves current workspace from the client config.

Parameters ~
{opts} obsidian.config.ClientOpts

Return ~
obsidian.Workspace| `(optional)`

 vim:tw=78:ts=8:noet:ft=help:norl: