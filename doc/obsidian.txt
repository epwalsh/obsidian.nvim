*obsidian.txt*           a plugin for writing and navigating an Obsidian vault

A Neovim plugin for writing and navigating an Obsidian <https://obsidian.md>
vault, written in Lua.

Built for people who love the concept of Obsidian ‚Äì a simple, markdown-based
notes app ‚Äì but love Neovim too much to stand typing characters into anything
else.

_This plugin is not meant to replace Obsidian, but to complement it._ My
personal workflow involves writing Obsidian notes in Neovim using this plugin,
while viewing and reading them using the Obsidian app. That said, this plugin
stands on its own as well. You don‚Äôt necessarily need to use it alongside the
Obsidian app.


==============================================================================
1. Table of contents                              *obsidian-table-of-contents*

- üëâ |obsidian-features|
    - |obsidian-commands|
    - |obsidian-demo|
- ‚öôÔ∏è |obsidian-setup|
    - |obsidian-requirements|
    - |obsidian-install-and-configure|
    - |obsidian-plugin-dependencies|
    - |obsidian-configuration-options|
    - |obsidian-notes-on-configuration|
    - |obsidian-using-templates|
- üêû |obsidian-known-issues|
- ‚ûï |obsidian-contributing|


==============================================================================
2. Features                                                *obsidian-features*

- ‚ñ∂Ô∏è Autocompletion for note references via nvim-cmp <https://github.com/hrsh7th/nvim-cmp> (triggered by typing `[[`)
- üèÉ Optional passthrough for `gf` to enable Obsidian links without interfering with existing functionality
- üíÖ Additional markdown syntax highlighting and concealing for references


COMMANDS                                                   *obsidian-commands*

- `:ObsidianOpen` to open a note in the Obsidian app.
    This command has one optional argument: the ID, path, or alias of the note to open. If not given, the note corresponding to the current buffer is opened.
- `:ObsidianNew` to create a new note.
    This command has one optional argument: the title of the new note.
- `:ObsidianQuickSwitch` to quickly switch to another notes in your vault, searching by its name using fzf.vim <https://github.com/junegunn/fzf.vim>, fzf-lua <https://github.com/ibhagwan/fzf-lua> or telescope.nvim <https://github.com/nvim-telescope/telescope.nvim>.
- `:ObsidianFollowLink` to follow a note reference under the cursor.
- `:ObsidianBacklinks` for getting a location list of references to the current buffer.
- `:ObsidianToday` to create a new daily note.
- `:ObsidianYesterday` to open (eventually creating) the daily note for the previous working day.
- `:ObsidianTemplate` to insert a template from the templates folder, selecting from a list using telescope.nvim <https://github.com/nvim-telescope/telescope.nvim> or one of the `fzf` alternatives.
    See |obsidian-"using-templates"| for more information.
- `:ObsidianSearch` to search for notes in your vault using ripgrep <https://github.com/BurntSushi/ripgrep> with fzf.vim <https://github.com/junegunn/fzf.vim>, fzf-lua <https://github.com/ibhagwan/fzf-lua> or telescope.nvim <https://github.com/nvim-telescope/telescope.nvim>.
    This command has one optional argument: a search query to start with.
- `:ObsidianLink` to link an in-line visual selection of text to a note.
    This command has one optional argument: the ID, path, or alias of the note to link to. If not given, the selected text will be used to find the note with a matching ID, path, or alias.
- `:ObsidianLinkNew` to create a new note and link it to an in-line visual selection of text.
    This command has one optional argument: the title of the new note. If not given, the selected text will be used as the title.


DEMO                                                           *obsidian-demo*


<https://user-images.githubusercontent.com/75107188/227362168-29ff9d4d-5b62-4aff-9442-21cd8c072d29.mp4>


==============================================================================
3. Setup                                                      *obsidian-setup*


REQUIREMENTS                                           *obsidian-requirements*

- NeoVim >= 0.8.0 (this plugin uses `vim.fs` which was only added in 0.8).
- If you want completion and search features (recommended) you‚Äôll also need ripgrep <https://github.com/BurntSushi/ripgrep> to be installed and on your `$PATH`.
    See ripgrep#installation <https://github.com/BurntSushi/ripgrep> for install options.

Search functionality (e.g.¬†via the `:ObsidianSearch` and
`:ObsidianQuickSwitch` commands) also requires telescope.nvim
<https://github.com/nvim-telescope/telescope.nvim> or one of the `fzf`
alternatives (see |obsidian-plugin-dependencies| below).


INSTALL AND CONFIGURE                         *obsidian-install-and-configure*

To configure obsidian.nvim you just need to call `require("obsidian").setup({
... })` with the desired options. Here are some examples using different plugin
managers. The full set of |obsidian-plugin-dependencies| and
|obsidian-configuration-options| are listed below.


USING LAZY.NVIM ~

>lua
    return {
      "epwalsh/obsidian.nvim",
      lazy = true,
      event = { "BufReadPre path/to/my-vault/**.md" },
      -- If you want to use the home shortcut '~' here you need to call 'vim.fn.expand':
      -- event = { "BufReadPre " .. vim.fn.expand "~" .. "/my-vault/**.md" },
      dependencies = {
        -- Required.
        "nvim-lua/plenary.nvim",
    
        -- see below for full list of optional dependencies üëá
      },
      opts = {
        dir = "~/my-vault",  -- no need to call 'vim.fn.expand' here
    
        -- see below for full list of options üëá
      },
    }
<


USING PACKER.NVIM ~

>lua
    use({
      "epwalsh/obsidian.nvim",
      requires = {
        -- Required.
        "nvim-lua/plenary.nvim",
    
        -- see below for full list of optional dependencies üëá
      },
      config = function()
        require("obsidian").setup({
          dir = "~/my-vault",
    
          -- see below for full list of options üëá
        })
      end,
    })
<


PLUGIN DEPENDENCIES                             *obsidian-plugin-dependencies*

The only required plugin dependency is plenary.nvim
<https://github.com/nvim-lua/plenary.nvim>, but there are a number of optional
dependencies that enhance the obsidian.nvim experience:

- hrsh7th/nvim-cmp <https://github.com/hrsh7th/nvim-cmp>: for completion of note references.
- nvim-telescope/telescope.nvim <https://github.com/nvim-telescope/telescope.nvim>: for search and quick-switch functionality.
- ibhagwan/fzf-lua <https://github.com/ibhagwan/fzf-lua>: an alternative to telescope for search and quick-switch functionality.
- junegunn/fzf <https://github.com/junegunn/fzf> and junegunn/fzf.vim <https://github.com/junegunn/fzf.vim>: another alternative to telescope for search and quick-switch functionality.
- godlygeek/tabular <https://github.com/godlygeek/tabular> and preservim/vim-markdown <https://github.com/preservim/vim-markdown>: alternative to nvim-treesitter for syntax highlighting.

If you choose to use any of these you should include them in the "dependencies"
or "requires" field of the obsidian.nvim plugin spec for your package manager.


CONFIGURATION OPTIONS                         *obsidian-configuration-options*

This is a complete list of all of the options that can be passed to
`require("obsidian").setup()`:

>lua
    {
      -- Required, the path to your vault directory.
      dir = "~/my-vault",
    
      -- Optional, if you keep notes in a specific subdirectory of your vault.
      notes_subdir = "notes",
    
      -- Optional, set the log level for obsidian.nvim. This is an integer corresponding to one of the log
      -- levels defined by "vim.log.levels.*" or nil, which is equivalent to DEBUG (1).
      log_level = vim.log.levels.DEBUG,
    
      daily_notes = {
        -- Optional, if you keep daily notes in a separate directory.
        folder = "notes/dailies",
        -- Optional, if you want to change the date format for daily notes.
        date_format = "%Y-%m-%d"
      },
    
      -- Optional, completion.
      completion = {
        -- If using nvim-cmp, otherwise set to false
        nvim_cmp = true,
        -- Trigger completion at 2 chars
        min_chars = 2,
        -- Where to put new notes created from completion. Valid options are
        --  * "current_dir" - put new notes in same directory as the current buffer.
        --  * "notes_subdir" - put new notes in the default notes subdirectory.
        new_notes_location = "current_dir",
    
        -- Whether to add the output of the node_id_func to new notes in autocompletion.
        -- E.g. "[[Foo" completes to "[[foo|Foo]]" assuming "foo" is the ID of the note.
        prepend_note_id = true
      },
    
      -- Optional, key mappings.
      mappings = {
        -- Overrides the 'gf' mapping to work on markdown/wiki links within your vault.
        ["gf"] = require("obsidian.mapping").gf_passthrough(),
      },
    
      -- Optional, customize how names/IDs for new notes are created.
      note_id_func = function(title)
        -- Create note IDs in a Zettelkasten format with a timestamp and a suffix.
        -- In this case a note with the title 'My new note' will given an ID that looks
        -- like '1657296016-my-new-note', and therefore the file name '1657296016-my-new-note.md'
        local suffix = ""
        if title ~= nil then
          -- If title is given, transform it into valid file name.
          suffix = title:gsub(" ", "-"):gsub("[^A-Za-z0-9-]", ""):lower()
        else
          -- If title is nil, just add 4 random uppercase letters to the suffix.
          for _ = 1, 4 do
            suffix = suffix .. string.char(math.random(65, 90))
          end
        end
        return tostring(os.time()) .. "-" .. suffix
      end,
    
      -- Optional, set to true if you don't want obsidian.nvim to manage frontmatter.
      disable_frontmatter = false,
    
      -- Optional, alternatively you can customize the frontmatter data.
      note_frontmatter_func = function(note)
        -- This is equivalent to the default frontmatter function.
        local out = { id = note.id, aliases = note.aliases, tags = note.tags }
        -- `note.metadata` contains any manually added fields in the frontmatter.
        -- So here we just make sure those fields are kept in the frontmatter.
        if note.metadata ~= nil and require("obsidian").util.table_length(note.metadata) > 0 then
          for k, v in pairs(note.metadata) do
            out[k] = v
          end
        end
        return out
      end,
    
      -- Optional, for templates (see below).
      templates = {
        subdir = "templates",
        date_format = "%Y-%m-%d-%a",
        time_format = "%H:%M",
      },
    
      -- Optional, by default when you use `:ObsidianFollowLink` on a link to an external
      -- URL it will be ignored but you can customize this behavior here.
      follow_url_func = function(url)
        -- Open the URL in the default web browser.
        vim.fn.jobstart({"open", url})  -- Mac OS
        -- vim.fn.jobstart({"xdg-open", url})  -- linux
      end,
    
      -- Optional, set to true if you use the Obsidian Advanced URI plugin.
      -- https://github.com/Vinzent03/obsidian-advanced-uri
      use_advanced_uri = true,
    
      -- Optional, set to true to force ':ObsidianOpen' to bring the app to the foreground.
      open_app_foreground = false,
    
      -- Optional, by default commands like `:ObsidianSearch` will attempt to use
      -- telescope.nvim, fzf-lua, and fzf.nvim (in that order), and use the
      -- first one they find. By setting this option to your preferred
      -- finder you can attempt it first. Note that if the specified finder
      -- is not installed, or if it the command does not support it, the
      -- remaining finders will be attempted in the original order.
      finder = "telescope.nvim",
    
      -- Optional, determines whether to open notes in a horizontal split, a vertical split,
      -- or replacing the current buffer (default)
      -- Accepted values are "current", "hsplit" and "vsplit"
      open_notes_in = "current"
    }
<


NOTES ON CONFIGURATION                       *obsidian-notes-on-configuration*


COMPLETION ~

obsidian.nvim will set itself up as an nvim-cmp source automatically when you
enter a markdown buffer within your vault directory, you do **not** need to
specify this plugin as a cmp source manually.


SYNTAX HIGHLIGHTING ~

If you use `vim-markdown` you‚Äôll probably want to disable its frontmatter
syntax highlighting (`vim.g.vim_markdown_frontmatter = 1`) which I‚Äôve found
doesn‚Äôt work very well.

If you‚Äôre using nvim-treesitter
<https://github.com/nvim-treesitter/nvim-treesitter/blob/master/README.md> and
not vim-markdown <https://github.com/preservim/vim-markdown>, you‚Äôll probably
want to enable `additional_vim_regex_highlighting` for markdown to benefit from
obsidian.nvim‚Äôs extra syntax improvements:

>lua
    require("nvim-treesitter.configs").setup({
      ensure_installed = { "markdown", "markdown_inline", ... },
      highlight = {
        enable = true,
        additional_vim_regex_highlighting = { "markdown" },
      },
    })
<


NOTE NAMING AND LOCATION ~

The `notes_subdir` and `note_id_func` options are not mutually exclusive. You
can use them both. For example, using a combination of both of the above
settings, a new note called "My new note" will assigned a path like
`notes/1657296016-my-new-note.md`.


GF PASSTHROUGH ~

If you want the `gf` passthrough functionality but you‚Äôve already overridden
the `gf` keybinding, just change your `gf` mapping definition to something like
this:

>lua
    vim.keymap.set("n", "gf", function()
      if require("obsidian").util.cursor_on_markdown_link() then
        return "<cmd>ObsidianFollowLink<CR>"
      else
        return "gf"
      end
    end, { noremap = false, expr = true })
<

Then make sure to comment out the `gf` keybinding in your obsidian.nvim config:

>lua
    mappings = {
      -- ["gf"] = require("obsidian.mapping").gf_passthrough(),
    },
<

Or alternatively you could map obsidian.nvim‚Äôs follow functionality to a
different key:

>lua
    mappings = {
      ["fo"] = require("obsidian.mapping").gf_passthrough(),
    },
<


USING TEMPLATES                                     *obsidian-using-templates*

To insert a template, run the command `:ObsidianTemplate`. This will open
telescope.nvim <https://github.com/nvim-telescope/telescope.nvim> or one of the
`fzf` alternatives and allow you to select a template from the templates
folder. Select a template and hit `<CR>` to insert. Substitution of `{{date}}`,
`{{time}}`, and `{{title}}` is supported.

For example, with the following configuration

>lua
    {
      -- other fields ...
    
      templates = {
          subdir = "my-templates-folder",
          date_format = "%Y-%m-%d-%a",
          time_format = "%H:%M"
      },
    }
<

and the file `~/my-vault/my-templates-folder/note template.md`:

>markdown
    # {{title}}
    Date created: {{date}}
<

creating the note `Configuring Neovim.md` and executing `:ObsidianTemplate`
will insert

>markdown
    # Configuring Neovim
    
    Date created: 2023-03-01-Wed
<

above the cursor position.


==============================================================================
4. Known Issues                                        *obsidian-known-issues*


CONFIGURING VAULT DIRECTORY BEHIND A LINK*obsidian-configuring-vault-directory-behind-a-link*

If you are having issues with commands like `ObsidianOpen`, ensure that your
vault is configured to use an absolute path rather than a link. If you must use
a link in your configuration, make sure that the name of the vault is present
in the file path of the link. For example:

>
    Vault: ~/path/to/vault/parent/obsidian/
    Link: ~/obsidian OR ~/parent
<


==============================================================================
5. Contributing                                        *obsidian-contributing*

Please read the CONTRIBUTING
<https://github.com/epwalsh/obsidian.nvim/blob/main/.github/CONTRIBUTING.md>
guide before submitting a pull request.

==============================================================================
6. Links                                                      *obsidian-links*

1. *See https://user-images.githubusercontent.com/75107188/227362168-29ff9d4d-5b62-4aff-9442-21cd8c072d29.mp4*: https://user-images.githubusercontent.com/75107188/227362168-29ff9d4d-5b62-4aff-9442-21cd8c072d29.mp4

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
